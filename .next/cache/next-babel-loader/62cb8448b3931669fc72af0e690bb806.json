{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/home/fernando/Documentos/Platzi/Next.js/podcast/pages/channel.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Error from 'next/error';\nimport Layout from '../components/Layout';\nimport ChannelTitle from '../components/ChannelTitle';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\nexport default class extends React.Component {\n  static async getInitialProps({\n    query,\n    res\n  }) {\n    try {\n      let idChannel = query.id;\n      let [reqChannel, reqAudio, reqSeries] = await _Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)]);\n\n      if (reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status;\n        return {\n          channel: null,\n          audioClips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      }\n\n      let {\n        body: {\n          channel\n        }\n      } = await reqChannel.json();\n      let {\n        body: {\n          audio_clips: audioClips\n        }\n      } = await reqAudio.json();\n      let {\n        body: {\n          channels: series\n        }\n      } = await reqSeries.json();\n      return {\n        channel,\n        audioClips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n\n    if (statusCode !== 200) {\n      return __jsx(Error, {\n        statusCode: statusCode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      });\n    }\n\n    return __jsx(Layout, {\n      title: `Podcast | ${channel.title}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(ChannelTitle, {\n      channel: channel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), series.length > 0 && __jsx(ChannelGrid, {\n      channels: series,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), __jsx(PodcastList, {\n      audioClips: audioClips,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/fernando/Documentos/Platzi/Next.js/podcast/pages/channel.js"],"names":["Error","Layout","ChannelTitle","ChannelGrid","PodcastList","React","Component","getInitialProps","query","res","idChannel","id","reqChannel","reqAudio","reqSeries","all","fetch","status","statusCode","channel","audioClips","series","body","json","audio_clips","channels","e","render","props","title","length"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,eAAe,cAAcC,KAAK,CAACC,SAApB,CAA8B;AAE3C,eAAaC,eAAb,CAA6B;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA7B,EAA6C;AAC3C,QAAI;AACF,UAAIC,SAAS,GAAGF,KAAK,CAACG,EAAtB;AACA,UAAI,CAACC,UAAD,EAAaC,QAAb,EAAuBC,SAAvB,IAAoC,MAAM,SAAQC,GAAR,CAAY,CACxDC,KAAK,CAAE,sCAAqCN,SAAU,EAAjD,CADmD,EAExDM,KAAK,CAAE,sCAAqCN,SAAU,cAAjD,CAFmD,EAGxDM,KAAK,CAAE,sCAAqCN,SAAU,iBAAjD,CAHmD,CAAZ,CAA9C;;AAMA,UAAGE,UAAU,CAACK,MAAX,IAAqB,GAAxB,EAA6B;AAC3BR,QAAAA,GAAG,CAACS,UAAJ,GAAiBN,UAAU,CAACK,MAA5B;AACA,eAAO;AACLE,UAAAA,OAAO,EAAE,IADJ;AAELC,UAAAA,UAAU,EAAE,IAFP;AAGLC,UAAAA,MAAM,EAAE,IAHH;AAILH,UAAAA,UAAU,EAAEN,UAAU,CAACK;AAJlB,SAAP;AAMD;;AAED,UAAI;AAAEK,QAAAA,IAAI,EAAE;AAAEH,UAAAA;AAAF;AAAR,UAAwB,MAAMP,UAAU,CAACW,IAAX,EAAlC;AACA,UAAI;AAAED,QAAAA,IAAI,EAAE;AAAEE,UAAAA,WAAW,EAAEJ;AAAf;AAAR,UAAwC,MAAMP,QAAQ,CAACU,IAAT,EAAlD;AACA,UAAI;AAAED,QAAAA,IAAI,EAAE;AAAEG,UAAAA,QAAQ,EAAEJ;AAAZ;AAAR,UAAiC,MAAMP,SAAS,CAACS,IAAV,EAA3C;AAEA,aAAO;AAAEJ,QAAAA,OAAF;AAAWC,QAAAA,UAAX;AAAuBC,QAAAA,MAAvB;AAA+BH,QAAAA,UAAU,EAAE;AAA3C,OAAP;AACD,KAvBD,CAuBE,OAAMQ,CAAN,EAAS;AACT,aAAO;AACLP,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,MAAM,EAAE,IAHH;AAILH,QAAAA,UAAU,EAAE;AAJP,OAAP;AAMD;AACF;;AAEDS,EAAAA,MAAM,GAAG;AACP,UAAO;AAAER,MAAAA,OAAF;AAAWC,MAAAA,UAAX;AAAuBC,MAAAA,MAAvB;AAA+BH,MAAAA;AAA/B,QAA8C,KAAKU,KAA1D;;AAEA,QAAGV,UAAU,KAAK,GAAlB,EAAuB;AACrB,aAAO,MAAC,KAAD;AAAO,QAAA,UAAU,EAAGA,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,WAAO,MAAC,MAAD;AAAQ,MAAA,KAAK,EAAI,aAAYC,OAAO,CAACU,KAAM,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL,MAAC,YAAD;AAAc,MAAA,OAAO,EAAKV,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAGJE,MAAM,CAACS,MAAP,GAAgB,CAAhB,IACC,MAAC,WAAD;AAAa,MAAA,QAAQ,EAAIT,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJG,EAOL,MAAC,WAAD;AAAa,MAAA,UAAU,EAAGD,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPK,CAAP;AASD;;AApD0C","sourcesContent":["import Error from 'next/error'\nimport Layout from '../components/Layout'\nimport ChannelTitle from '../components/ChannelTitle'\nimport ChannelGrid from '../components/ChannelGrid'\nimport PodcastList from '../components/PodcastList'\n\nexport default class extends React.Component {\n\n  static async getInitialProps({ query, res }) {\n    try {\n      let idChannel = query.id\n      let [reqChannel, reqAudio, reqSeries] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n      ])\n\n      if(reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status\n        return { \n          channel: null, \n          audioClips: null, \n          series: null,\n          statusCode: reqChannel.status\n        }\n      }\n  \n      let { body: { channel } } = await reqChannel.json()\n      let { body: { audio_clips: audioClips } } = await reqAudio.json()\n      let { body: { channels: series } } = await reqSeries.json()    \n  \n      return { channel, audioClips, series, statusCode: 200 }\n    } catch(e) {\n      return { \n        channel: null, \n        audioClips: null, \n        series: null,\n        statusCode: 503\n      }\n    }\n  }\n\n  render() {\n    const  { channel, audioClips, series, statusCode } = this.props\n\n    if(statusCode !== 200) {\n      return <Error statusCode={ statusCode } />\n    }\n\n    return <Layout title={ `Podcast | ${channel.title}` } >\n      <ChannelTitle channel = { channel } />\n\n      {series.length > 0 &&\n        <ChannelGrid channels = {series} /> \n      }\n    \n      <PodcastList audioClips={ audioClips } />\n    </Layout>\n  }\n\n  \n}"]},"metadata":{},"sourceType":"module"}