{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport ChannelTitle from '../components/ChannelTitle';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\n\nvar _default =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  function _default(props) {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"openPodcast\", function (event, podcast) {\n      event.preventDefault();\n\n      _this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    _this.state = {\n      openPodcast: null\n    };\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          channel = _this$props.channel,\n          audioClips = _this$props.audioClips,\n          series = _this$props.series,\n          statusCode = _this$props.statusCode;\n      var openPodcast = this.state.openPodcast;\n\n      if (statusCode !== 200) {\n        return __jsx(Error, {\n          statusCode: statusCode\n        });\n      }\n\n      return __jsx(Layout, {\n        title: \"Podcast | \".concat(channel.title)\n      }, __jsx(ChannelTitle, {\n        channel: channel\n      }), series.length > 0 && __jsx(ChannelGrid, {\n        channels: series\n      }), __jsx(PodcastList, {\n        audioClips: audioClips,\n        openPodcast: this.openPodcast\n      }), openPodcast && console.log('hooola soy ignacio'));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var query, res, idChannel, _ref2, _ref3, reqChannel, reqAudio, reqSeries, _ref4, channel, _ref5, audioClips, _ref6, series;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                query = _ref.query, res = _ref.res;\n                _context.prev = 1;\n                idChannel = query.id;\n                _context.next = 5;\n                return _Promise.all([fetch(\"https://api.audioboom.com/channels/\".concat(idChannel)), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/audio_clips\")), fetch(\"https://api.audioboom.com/channels/\".concat(idChannel, \"/child_channels\"))]);\n\n              case 5:\n                _ref2 = _context.sent;\n                _ref3 = _slicedToArray(_ref2, 3);\n                reqChannel = _ref3[0];\n                reqAudio = _ref3[1];\n                reqSeries = _ref3[2];\n\n                if (!(reqChannel.status >= 400)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                res.statusCode = reqChannel.status;\n                return _context.abrupt(\"return\", {\n                  channel: null,\n                  audioClips: null,\n                  series: null,\n                  statusCode: reqChannel.status\n                });\n\n              case 13:\n                _context.next = 15;\n                return reqChannel.json();\n\n              case 15:\n                _ref4 = _context.sent;\n                channel = _ref4.body.channel;\n                _context.next = 19;\n                return reqAudio.json();\n\n              case 19:\n                _ref5 = _context.sent;\n                audioClips = _ref5.body.audio_clips;\n                _context.next = 23;\n                return reqSeries.json();\n\n              case 23:\n                _ref6 = _context.sent;\n                series = _ref6.body.channels;\n                return _context.abrupt(\"return\", {\n                  channel: channel,\n                  audioClips: audioClips,\n                  series: series,\n                  statusCode: 200\n                });\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](1);\n                return _context.abrupt(\"return\", {\n                  channel: null,\n                  audioClips: null,\n                  series: null,\n                  statusCode: 503\n                });\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 28]]);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return _default;\n}(React.Component);\n\nexport { _default as default };","map":{"version":3,"sources":["/home/fernando/Documentos/Platzi/Next.js/podcast/pages/channel.js"],"names":["Error","Layout","ChannelTitle","ChannelGrid","PodcastList","props","event","podcast","preventDefault","setState","openPodcast","state","channel","audioClips","series","statusCode","title","length","console","log","query","res","idChannel","id","all","fetch","reqChannel","reqAudio","reqSeries","status","json","body","audio_clips","channels","React","Component"],"mappings":"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","sourcesContent":["import Error from './_error'\nimport Layout from '../components/Layout'\nimport ChannelTitle from '../components/ChannelTitle'\nimport ChannelGrid from '../components/ChannelGrid'\nimport PodcastList from '../components/PodcastList'\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { openPodcast: null }\n  }\n\n  static async getInitialProps({ query, res }) {\n    try {\n      let idChannel = query.id\n      let [reqChannel, reqAudio, reqSeries] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n      ])\n\n      if(reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status\n        return { \n          channel: null, \n          audioClips: null, \n          series: null,\n          statusCode: reqChannel.status\n        }\n      }\n  \n      let { body: { channel } } = await reqChannel.json()\n      let { body: { audio_clips: audioClips } } = await reqAudio.json()\n      let { body: { channels: series } } = await reqSeries.json()    \n  \n      return { channel, audioClips, series, statusCode: 200 }\n    } catch(e) {\n      return { \n        channel: null, \n        audioClips: null, \n        series: null,\n        statusCode: 503\n      }\n    }\n  }\n\n  openPodcast = (event, podcast) => {\n    event.preventDefault()\n    this.setState({\n      openPodcast: podcast\n    })\n  }\n\n  render() {\n    const  { channel, audioClips, series, statusCode } = this.props\n    const { openPodcast } = this.state\n\n    if(statusCode !== 200) {\n      return <Error statusCode={ statusCode } />\n    }\n\n    return <Layout title={ `Podcast | ${channel.title}` } >\n      <ChannelTitle channel = { channel } />\n      {series.length > 0 &&\n        <ChannelGrid channels = {series} /> \n      }\n    \n      <PodcastList audioClips={ audioClips } openPodcast={ this.openPodcast } />\n      { openPodcast && console.log('hooola soy ignacio')}\n    </Layout>\n  }\n\n  \n}"]},"metadata":{},"sourceType":"module"}