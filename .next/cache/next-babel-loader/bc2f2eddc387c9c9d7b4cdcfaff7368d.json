{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport ChannelTitle from '../components/ChannelTitle';\nimport ChannelGrid from '../components/ChannelGrid';\nimport PodcastList from '../components/PodcastList';\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"openPodcast\", (event, podcast) => {\n      event.preventDefault();\n      this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    this.state = {\n      openPodcast: null\n    };\n  }\n\n  static async getInitialProps({\n    query,\n    res\n  }) {\n    try {\n      let idChannel = query.id;\n      let [reqChannel, reqAudio, reqSeries] = await _Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)]);\n\n      if (reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status;\n        return {\n          channel: null,\n          audioClips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      }\n\n      let {\n        body: {\n          channel\n        }\n      } = await reqChannel.json();\n      let {\n        body: {\n          audio_clips: audioClips\n        }\n      } = await reqAudio.json();\n      let {\n        body: {\n          channels: series\n        }\n      } = await reqSeries.json();\n      return {\n        channel,\n        audioClips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n    const {\n      openPodcast\n    } = this.state;\n\n    if (statusCode !== 200) {\n      return __jsx(Error, {\n        statusCode: statusCode\n      });\n    }\n\n    return __jsx(Layout, {\n      title: `Podcast | ${channel.title}`\n    }, __jsx(ChannelTitle, {\n      channel: channel\n    }), openPodcast && __jsx(\"div\", null, \"hola ignacio\"), series.length > 0 && __jsx(ChannelGrid, {\n      channels: series\n    }), __jsx(PodcastList, {\n      audioClips: audioClips,\n      openPodcast: this.openPodcast\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/fernando/Documentos/Platzi/Next.js/podcast/pages/channel.js"],"names":["Error","Layout","ChannelTitle","ChannelGrid","PodcastList","React","Component","constructor","props","event","podcast","preventDefault","setState","openPodcast","state","getInitialProps","query","res","idChannel","id","reqChannel","reqAudio","reqSeries","all","fetch","status","statusCode","channel","audioClips","series","body","json","audio_clips","channels","e","render","title","length"],"mappings":"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","sourcesContent":["import Error from './_error'\nimport Layout from '../components/Layout'\nimport ChannelTitle from '../components/ChannelTitle'\nimport ChannelGrid from '../components/ChannelGrid'\nimport PodcastList from '../components/PodcastList'\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { openPodcast: null }\n  }\n\n  static async getInitialProps({ query, res }) {\n    try {\n      let idChannel = query.id\n      let [reqChannel, reqAudio, reqSeries] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n      ])\n\n      if(reqChannel.status >= 400) {\n        res.statusCode = reqChannel.status\n        return { \n          channel: null, \n          audioClips: null, \n          series: null,\n          statusCode: reqChannel.status\n        }\n      }\n  \n      let { body: { channel } } = await reqChannel.json()\n      let { body: { audio_clips: audioClips } } = await reqAudio.json()\n      let { body: { channels: series } } = await reqSeries.json()    \n  \n      return { channel, audioClips, series, statusCode: 200 }\n    } catch(e) {\n      return { \n        channel: null, \n        audioClips: null, \n        series: null,\n        statusCode: 503\n      }\n    }\n  }\n\n  openPodcast = (event, podcast) => {\n    event.preventDefault()\n    this.setState({\n      openPodcast: podcast\n    })\n  }\n\n  render() {\n    const  { channel, audioClips, series, statusCode } = this.props\n    const { openPodcast } = this.state\n\n    if(statusCode !== 200) {\n      return <Error statusCode={ statusCode } />\n    }\n\n    return <Layout title={ `Podcast | ${channel.title}` } >\n      <ChannelTitle channel = { channel } />\n      { openPodcast && <div>hola ignacio</div>}\n      {series.length > 0 &&\n        <ChannelGrid channels = {series} /> \n      }\n    \n      <PodcastList audioClips={ audioClips } openPodcast={ this.openPodcast } />\n    </Layout>\n  }\n\n  \n}"]},"metadata":{},"sourceType":"module"}